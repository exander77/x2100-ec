60 dgcp
62 flcp
64 dgvo
66 bdw
68 bdl
6a bpr BATTERY PRESENT RATE
6c brc BATTERY REMAINING CHARGE
6e bpv BATTERY PRESENT VOLTAGE

root@siddhi:/sys/kernel/debug/ec/ec0# hexdump -C io
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000050  28 ea 0d 0e 49 80 00 00  00 00 00 00 00 00 00 00  |(...I...........|
00000060  74 1a 91 1f 30 2a a1 00  50 00 00 00 91 1f c0 30  |t...0*..P......0|

lives at: 0x100ba + 0x60
which means that present rate is 10124, remaining charge is 10126, present voltage is 10128

CONSIDER NOPPING OUT 234f8: WAS  13 00 30 f1 26 01
                            MAKE 00 2c 00 2c 00 2c
CONSIDER NOPPING OUT 23450

echo '002c002c002c' | xxd -r -p | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x234f8]
echo '002c002c002c' | xxd -r -p | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x23450]

bat state query:

16 00 00 00
b0 18 01 00

09 03 00 00
28 01 01 00

0f 03 00 00
26 01 01 00

NEW:

0b 03 00 00
00 ca 02 00
TEMP REGION

00 ff 00 00
00 00 00 00

2b29c is old ptr, update last two bytes of ptr at 233ca

use 2c900 as patch region:

2ca00 version:
echo 16 00 00 00 b0 18 01 00 09 03 00 00 28 01 01 00 0f 03 00 00 26 01 01 00 0b 03 00 00 00 ca 02 00 00 ff 00 00 00 00 00 00 | xxd -r -p | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x2c900]

into current reg:
echo 16 00 00 00 b0 18 01 00 09 03 00 00 28 01 01 00 0f 03 00 00 26 01 01 00 0b 03 01 00 24 01 01 00 00 ff 00 00 00 00 00 00 | xxd -r -p | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x2c900]
echo '00c9' | xxd -r -p | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x233ca]

READ CURRENT:
dd if=/sys/kernel/debug/ec/ec0/ram bs=1 count=2 skip=$[0x2ca00] | hexdump -C

to poll current:

while true; do echo $[0x$(dd if=/sys/kernel/debug/ec/ec0/ram bs=1 count=8 skip=$[0x10b00] 2>/dev/null | xxd -p | sed -e 's/\(..\)\(..\).*/\2\1/')-0x10000] ; sleep 1; done

with the display off and the system completely idle, drawing -450 - -500
  powertop says 5.60W + 962 mW + 623 mW = 7.18 W

loading the system up some, -1865 to -2114
  powertop says 12.50W + 6.70W + 625mW = 19.82W
  delta is 12.64W

could be mA? 2114 mA @ 11.1V = 23.4 W
500mA @ 11.1V = 5.5W
delta is 17.9W, which makes sense given a watt or so of fans, and 70% efficient supplies

still 500 is too low for 11.1V... though voltage_now is 12.2V = 6.9W, so...

ok, let's write for bat_changed_un?  we want to load from 0x10b00 and store to 0x10124

at 0x2c930:
LOADW *0x10b00, R0    12 00 00 F1 00 0B
STORW R0, *0x10124    13 00 00 F1 24 01
MOVD $0x10130, R8R7   77 00 01 00 30 01
@ 0x2c942
BR 0x23388            10 00 ef 0f 46 6A
                      op op c  s

displacement is -95BA (23388 - 2C942) = FF6A46

at 0x23382
BR 0x2c930            10 00 e0 00 AE 95
displacement is C930 - 3382 = 95AE

br cond disp16 

then at 0x23382:
BR 0x2c930

***
FAST-CHARGING
***

Here's what I know of battery opcodes so far:

00 = set-and-prepare.  Pointer is a function pointer >> 1.  BATFUN is SMBus ID.
So: 16 00 00 00, b0 18 01 00 = "set SMBus ID for rest of the sequence", "call function pointer 23160".
01 = ?
02 = ?
03 = *ptr = read16(smbus ID from 00, batfun).  Modifier in theory is absolute value, in practice crashes EC.
04 = write16(smbus ID from 00, batfun, *ptr).

So let's try injecting:

set SMBus ID to 12 (bq24725a address)
12 00 00 00
b0 18 01 00

read manuf ID to 2ca00, should be 0040
fe 03 00 00
00 ca 02 00

read manuf ID to 2ca02, should be 000B
ff 03 00 00
02 ca 02 00

read current limit to 2ca04
14 03 00 00
04 ca 02 00

read voltage limit to 2ca06
15 03 00 00
06 ca 02 00

00 ff 00 00
00 00 00 00

however, doing a read manuf ID causes the SMbus to lock up (i.e., causes it
to be no longer able to sense battery presence at all).  17m19 says that
battery is on a separate SMBus than charger, so that makes sense; trying
other values of `abs` in the `00` opcode does not seem to help, though

BATTERY CURRENT is at 10038 -- set to 0x5dc (1500) by default
BATTERY VOLTAGE is at 1003a -- set to 0x3200 (12800 == 4.26V/cell) by default

****************************************
WHY DOES 6c / 10126 TURN TO 0 SOMETIMES?
****************************************

the approach: inject chunks of code that bracket functions to tell us if the
flip happened in that function or not.

FOR INSTANCE:

is it ev0_d's fault?

                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined ev0_d()
             undefined         R0:1           <RETURN>
                             ev0_d                                           XREF[1]:     0002b6c0(*)  
        00027998 1e 01           push       $0x2, RA_L
        0002799a ff c0 e7 a0     BAL        (RA),*handle_ev0_d_wr                            undefined handle_ev0_d_wr()
        0002799e 1e 03           popret     $0x2, RA_L

interpose with something like:

.org 0x2d000 - 2
ev0_d_patch:
        push ra
        loadw *present_rate, r0
        cmpw $0, r0
        bne notbefore
        loadb *beforebuf, r0
        cmpb $0, r0 # already caught one
        bne notbefore
        movb $'1', r0
        storb r0, *beforebuf
notbefore:

        bal (ra),*handle_ev0_d_wr

        loadw *present_rate, r0
        cmpw $0, r0
        bne notafter
        loadb *beforebuf, r0
        cmpb $0, r0 # already caught one
        bne notafter
        movb $'2', r0
        storb r0, *beforebuf

notafter:
        popret ra

ok I got a '2' and then I got a '1'.  which is it?

ok try something like:

dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x10124] count=2 2>/dev/null | hexdump -C; \
echo 00 | xxd -r -p | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x10b04] 2>/dev/null; \
dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x10124] count=2 2>/dev/null | hexdump -C; \
dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x10b04] count=1 2>/dev/null | hexdump -C; \
sleep 1; dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x10b04] count=1 2>/dev/null | hexdump -C

problem is NOT in ev0_d


ev0_5 CAUSED EC TO CRASH
ev0_6 UNTESTED, POSSIBLE
ev0_7 is a noop
ev0_8_ec_cmd?  YOU CAN'T HOT PATCH THAT YOU DUMB OAF.
ev0_9 is a noop
ev0_a calls a sketchy function pointer
ev0_b is a noop
ev0_c is a noop
ev0_e looks harmless
ev0_f is a noop

FOUND IT by just disassembling chunks of code that I hadn't disassembled yet


***
remind me: how does the battery smbus query mechanism work, anyway?

there is a state machine that looks up tables of BAT_REG_QUERYs.  this is
stored in bat_query_ptrs (there are 4 of them).  set_bat_query_ptr puts one
in an empty spot.  this is handled by the core state machine, SMBusRoutine;
a bat_query_ptr is an array of operations.  here are the opcodes:

  opcode 0x00:
    set up parameters for this batquery.
    
    dest: contains a function pointer for a completion callback (see opc
          0xff).
    mode: SMBus number ("smbus_id").
    bat_fun: I2C address on SMBus ("i2c_addr").
  
  opcode 0x01:
    smb_query_battery_opc_c1(smbus_id, i2c_addr, THIS bat_fun, 1)
    copies one byte into *THIS.dest later; seems to set up a 2-byte read
  
  opcode 0x02:
    write 8 bits: smbus_id.i2c_addr[THIS.bat_fun] = (uint8_t) THIS.mode

  opcode 0x03:
    read 16 bits: *THIS.dest = (uint16_t) smbus_id.i2c_addr[THIS.bat_fun]
    
    note that the "mode" flag on this can be set to 1 for absolute value
    mode; this does not seem to work right

  opcode 0x04:
    write 16 bits: (uint16_t) smbus_id.i2c_addr[THIS.bat_fun) = *(uint16_t *)THIS.dest

  opcode 0xff:
    call completion callback.  if completion callback returns zero, keep
    this batquery around and run it again later; otherwise, do not repeat
    it.

what does usbc_smbus_query do?

  opc 0x00(smbus_id = 1, i2c_addr = 0x70, callback = usbc_smbus_callback)
  (batquery_m5 + 5)(mode = mode, fun = batquery_fun, dest = destptr)
  0xFF

so batquery_m5 table:
  0xF0: set 0x1010F
  0xF1: clear 0x1010F
  0xF2: do something with TUSB546?
  0xF4: disable charging
  0xF5: enable charging
  0xF6: set fan PWM
  0xF7: unknown 2368c
  0xF8: unknown 230a6
  0xF9: write value to 0x1012c
  0xFA: set charger current and voltage
  0xFB: opc0, invalid
  0xFC: opc_c1
  0xFD: write 8
  0xFE: read 16
  0xFF: write 16

this is called from usbc_trigger_smbus_query -- what calls that?  very... 
complicated...  stuff

consider also: charge_configure_fully_query
  opc 0x00(smbus_id = 1, i2c_addr = 0x12, callback = return 0xFF)
  opc 0x04(bat_fun = 0x12, data = ChargeOption)
  opc 0x04(bat_fun = 0x14, data = ChargeCurrent)
  opc 0x04(bat_fun = 0x15, data = ChargeVoltage)
  opc 0xFF

consider also: bat_prop_queries
  opc 0x00(smbus_id = 0, i2c_addr = 0x16, callback = ...)
  opc 0x03(bat_fun = 0x10, mode = 0x0, dest = ecreg62_fullcap)
  ...

PROBLEM: there is no opcode to read >16 bits.  that means we can read only
the first 2 bytes of the Parameter, whichever that be.  so we need to patch
the smbusroutine, really.

known things about a smb_buf: a smb_buf has:

  a unkcmd, an txlen, a smbus_addr, a smbus_opc (that's an i2c addr)
  
  to write 16:
    unkcmd = 0x42
    txlen  = 4
    addr   = i2caddr
    opc    = regaddr
    data[...] = data[...]
  
  to read 16:
    unkcmd = 0xc2
    txlen  = 2
    addr   = addr
    opc    = regaddr
  
  to write 8:
    unkcmd = 0x41
    txlen  = 3
    addr   = addr
    opc    = opc
    data[0]= data[0]
  
  unknown thing c1:
    unkcmd = 0xc1
    txlen  = 2
    addr   = addr
    opc    = opc
    presumably 'read 8'?

NEW CMD: opc 0x80 = read 16b


*** NOTES ON ATOMIC PATCHLOADER:

we need a mechanism to SAFELY trigger things in the EC.  we will use
process_ec_cmd_81_sub for this.

we will use opcode 0xFC 0x00 to trigger a jump, and opcode 0xFC 0x01 to
trigger a patchload.

to trigger a jump:

  write the jump address to 0x10c00 RIGHT SHIFTED BY ONE (try: 0x2d04e == 0x16827 -> 27680100)
  opcode 0xFC 0x00

try:
  load the patchloader...
  # dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x10c04] count=1 2>/dev/null | hexdump -C
  # echo 27680100 | xxd -r -p | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x10c00] 2>/dev/null
  # echo -en '\x00' > /sys/kernel/debug/ec/ec0/xop
  # dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x10c04] count=1 2>/dev/null | hexdump -C 
  it should have incremented
   
to trigger a patch load:
  write a sequence of packets to 0x2e000, of form:
    AA AA AA AA BB .......
    where AAAAAAAA is an address, and BB is a byte count
    end with a byte count of 0
  opcode 0xFC 0x01
  
try:
  # dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x2f000] count=4 2>/dev/null | hexdump -C
  # echo '00f0020004aabbccdd0000000000' | xxd -r -p | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x2e000] 2>/dev/null
  # echo -en '\x01' > /sys/kernel/debug/ec/ec0/xop
  # dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x2f000] count=4 2>/dev/null | hexdump -C


*** NOTES ON USBC CHARGE NEGOTIATION:

to try to trigger the read -- build it and then run the atomic patchloader

then:

dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x00010b02] count=24 2>/dev/null | hexdump -C
echo -en '\x00' | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x10b12] 2>/dev/null
echo d0640100 | xxd -r -p | dd of=/sys/kernel/debug/ec/ec0/ram bs=1 seek=$[0x10c00] 2>/dev/null
echo -en '\x00' > /sys/kernel/debug/ec/ec0/xop
sleep 3
dd if=/sys/kernel/debug/ec/ec0/ram bs=1 skip=$[0x00010b02] count=24 2>/dev/null | hexdump -C   

*** NOTES ON SCANNING THE I2C BUS:

smbus_id = 0 has things on address:
  16 (battery)
  
smbus_id = 1 has things on addresses:
  12 (battery charger)
  50 (???)
    does not behave like a USBC controller; seems to have a memory that is 00 00 00 00 ad ad ad ad ad ad ad ad...
  8c (???)
    does not behave like a USBC controller; seems to have other registers
    00 = 851423110100f0008000000702000000
    01 = 0000dc00000000000080000000200218
    02 = f2e4ff00ff0300000000000000000000

smbus_id = 2 has no I2C peripherals
smbus_id = 3 has no I2C peripherals

at some point in this process I confused the EC and locked up the i2c engine...


*** I reproduce the same thing using the bitbanging stuff:

joshua@anima:~/x2100/x2100-ec/notes$ sudo ./ectool.py --elf usbc-bitbang-scan.oo --hotpatch --read-symbol last_good_address --call bitbang_scan --read-symbol last_good_address --call bitbang_scan --read-symbol last_good_address --call bitbang_scan --read-symbol last_good_address --call bitbang_scan --read-symbol last_good_address
ELF load: LOAD: 0x10b12 (2 bytes)
ELF load: LOAD: 0x2c9a0 (128 bytes)
ELF load: 40 symbols
Writing 130 bytes into EC RAM...
DONE
last_good_address (0x10b12): 0xfe
Calling into bitbang_scan (0x2c9a0) on EC...
DONE
last_good_address (0x10b12): 0x12
Calling into bitbang_scan (0x2c9a0) on EC...
DONE
last_good_address (0x10b12): 0x50
Calling into bitbang_scan (0x2c9a0) on EC...
DONE
last_good_address (0x10b12): 0x8c
Calling into bitbang_scan (0x2c9a0) on EC...
DONE
last_good_address (0x10b12): 0x12
